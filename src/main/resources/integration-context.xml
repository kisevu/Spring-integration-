<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/integration
           https://www.springframework.org/schema/integration/spring-integration.xsd
           http://www.springframework.org/schema/jdbc
           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
    <int:channel id="jdbcChannel"/>
<jdbc:embedded-database id="datasource" type="H2">
    <jdbc:script location="init.sql"/>
</jdbc:embedded-database>
</beans>

<!--
* Integration with jdbc)
*******************************************************
* Integration of relational databases via jdbc.
* Direct jdbc connection from one application to another is not an uncommon thing.
* Spring integration helps us to abstract this communication using the spring integration jdbc integration support.
* We'll use jdbc Inbound/ Outbound Channel Adapters, which allows us to read and write records to a relational
 database with jdbc. We'll see how the message system passes messages
* We'll look at the jdbc outbound Gateway which provides us with capabilities to receive or send messages.
-->
